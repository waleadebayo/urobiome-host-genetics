plsFit <- train(Class ~ ., data=training3, method="pls",metric="ROC", tuneLength=15,preProc=c("center","scale"),trControl=ctrl,importance=T,ncomp=7)
y33<- extract.clade(imp20tr,"y33")
y33<-y33$tip.label
cmon2 <- intersect(colnames(totuImp), y33)
y33CLRut <- totuImp[,cmon2]
cmon <- intersect(rownames(y33CLRut), rownames(cognClust))
y33CLRut <- y33CLRut[cmon,]
cognClust<-cognClust[cmon,]
y33CLRut$Class <- cognClust$`cognPam1$clustering`
y33CLRut <- y33CLRut[complete.cases(y33CLRut$Class),]
y33CLRut$Class<-gsub("1","Group1", y33CLRut$Class)
y33CLRut$Class<-gsub("2","Group2", y33CLRut$Class)
y33CLRut$Class<-gsub("3","Group3", y33CLRut$Class)
set.seed(159)
inTrain3 <- createDataPartition(y=y33CLRut$Class,p=.75,list=F)
training3 <-y33CLRut[ inTrain3,]
testing3 <-y33CLRut[ -inTrain3,]
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 10,summaryFunction = prSummary,sampling = "up",classProbs = T)
plsFit <- train(Class ~ ., data=training3, method="pls",metric="ROC", tuneLength=15,preProc=c("center","scale"),trControl=ctrl,importance=T,ncomp=7)
ctrl <- trainControl(method="repeatedcv",repeats = 10,summaryFunction = multiClassSummary,sampling = "up",classProbs = T)
plsFit <- train(Class ~ ., data=training3, method="pls",metric="ROC", tuneLength=15,preProc=c("center","scale"),trControl=ctrl,importance=T,ncomp=7)
plsFit <- train(Class ~ ., data=training3,metric="ROC", tuneLength=15,preProc=c("center","scale"),trControl=ctrl,importance=T,ncomp=7)
plsFit
plsClasses <- predict(plsFit, newdata = testing3)
confusionMatrix(data = plsClasses, testing3$Class)
levels(testing3$Class)
unique(testing3$Class)
unique(training3$Class)
confusionMatrix(data = plsClasses, as.factor(testing3$Class))
cmon <- intersect(rownames(y33CLRut), rownames(hoci))
y33CLRut <- y33CLRut[cmon,]
cognClust<-cognClust[cmon,]
y33CLRut$Class <- cognClust$scqMMSE
y33CLRut <- y33CLRut[complete.cases(y33CLRut$Class),]
inTrain3 <- createDataPartition(y=y33CLRut$Class,p=.75,list=F)
cmon <- intersect(rownames(y33CLRut), rownames(hoci))
y33CLRut <- y33CLRut[cmon,]
cognClust<-cognClust[cmon,]
cmon <- intersect(rownames(y33CLRut), rownames(hoci))
y33CLRut <- y33CLRut[cmon,]
cognClust<-hoci[cmon,]
y33CLRut$Class <- cognClust$scqMMSE
y33CLRut <- y33CLRut[complete.cases(y33CLRut$Class),]
set.seed(159)
inTrain3 <- createDataPartition(y=y33CLRut$Class,p=.75,list=F)
training3 <-y33CLRut[ inTrain3,]
testing3 <-y33CLRut[ -inTrain3,]
plot(varImp(plsFit))
plot((plsFit))
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 10,sampling = "up",classProbs = T)
ctrl <- trainControl(method="repeatedcv",repeats = 3,sampling = "up",classProbs = T)
plsFit <- train(Class ~ ., data=training3,metric="ROC", tuneLength=15,preProc=c("center","scale"),trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs = T)
plsFit <- train(Class ~ ., data=training3,metric="ROC", tuneLength=15,preProc=c("center","scale"),trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3, tuneLength=15,preProc=c("center","scale"),trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 3)
plsFit <- train(Class ~ ., data=training3, tuneLength=15,preProc=c("center","scale"),trControl=ctrl,importance=T)
plsFit
plot(varImp(plsFit))
plsFit <- train(Class ~ ., data=training3, tuneLength=15,preProc=c("BoxCox"),trControl=ctrl,importance=T)
plsFit
cmon2 <- intersect(colnames(totuImp), y33)
y33CLRut <- totuImp[,cmon2]
cmon <- intersect(rownames(y33CLRut), rownames(hoci))
y33CLRut <- y33CLRut[cmon,]
cognClust<-hoci[cmon,]
y33CLRut$Class <- cognClust$scale(total_mmse)
y33CLRut <- y33CLRut[complete.cases(y33CLRut$Class),]
cmon2 <- intersect(colnames(totuImp), y33)
y33CLRut <- totuImp[,cmon2]
cmon <- intersect(rownames(y33CLRut), rownames(hoci))
y33CLRut <- y33CLRut[cmon,]
cognClust<-hoci[cmon,]
y33CLRut$Class <- scale(cognClust$total_mmse)
y33CLRut <- y33CLRut[complete.cases(y33CLRut$Class),]
set.seed(159)
inTrain3 <- createDataPartition(y=y33CLRut$Class,p=.75,list=F)
training3 <-y33CLRut[ inTrain3,]
testing3 <-y33CLRut[ -inTrain3,]
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 10)
plsFit <- train(Class ~ ., data=training3, tuneLength=15,preProc=c("BoxCox"),trControl=ctrl,importance=T)
plsFit
ctrl <- trainControl(method="repeatedcv",repeats = 3)
plsFit <- train(Class ~ ., data=training3, tuneLength=15,method="blassoAveraged",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3,method="blassoAveraged",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3,method="blassoAveraged",trControl=ctrl)
plsFit
plot(plsFit)
plot(varImp(plsFit))
plsClasses <- predict(plsFit, newdata = testing3)
confusionMatrix(data = plsClasses, testing3$Class)
combo <- data.frame(testing3$Class, plsClasses)
colnames(combo)<- c("Class","predClass")
combo$absDiff <- abs(combo$Class - combo$predClass)
mean(combo$absDiff)
sd(combo$Class)
sqrt(mean(combo$Diff*combo$Diff))
combo$Diff <- (combo$Class - combo$predClass)
sqrt(mean(combo$Diff*combo$Diff))
plsFit <- train(Class ~ ., data=training3,method="bridge",trControl=ctrl)
plsFit <- train(Class ~ ., data=training3,method="bridge",trControl=ctrl,importance=T)
plot(varImp(plsFit))
combo <- data.frame(testing3$Class, plsClasses)
colnames(combo)<- c("Class","predClass")
combo$absDiff <- abs(combo$Class - combo$predClass)
combo$Diff <- (combo$Class - combo$predClass)
mean(combo$absDiff)
plsFit <- train(Class ~ ., data=training3,method="bridge",trControl=ctrl)
plsClasses <- predict(plsFit, newdata = testing3)
combo <- data.frame(testing3$Class, plsClasses)
colnames(combo)<- c("Class","predClass")
combo$absDiff <- abs(combo$Class - combo$predClass)
combo$Diff <- (combo$Class - combo$predClass)
mean(combo$absDiff)
sd(combo$Class)
sqrt(mean(combo$Diff*combo$Diff))
mean(combo$absDiff)
plsFit <- train(Class ~ ., data=training3,method="rf",mtry=8,trControl=ctrl)
plsFit <- train(Class ~ ., data=training3,method="rf",mtry=7,trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3,method="rf",mtry=5,trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 3,mtry=7); plsFit <- train(Class ~ ., data=training3,method="rf",trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 3); plsFit <- train(Class ~ ., data=training3,method="treebag",trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 3); plsFit <- train(Class ~ ., data=training3,method="treebag",trControl=ctrl)
ctrl <- trainControl(method="repeatedcv",repeats = 3); plsFit <- train(Class ~ ., data=training3,method="treebag",importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 3); plsFit <- train(Class ~ ., data=training3,method="treebag")
ctrl <- trainControl(method="boot"); plsFit <- train(Class ~ ., data=training3,method="treebag",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3,method="treebag",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3,method="treebag")
plsFit <- train(Class ~ ., data=training3,method='treebag')
warnings()
ctrl <- trainControl(method="repeatedcv",repeats = 3); plsFit <- train(Class ~ ., data=training3,method="glmboost",trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 3); plsFit <- train(Class ~ ., data=training3,method="glmboost",trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 3); plsFit <- train(Class ~ ., data=training3,method="glmboost",trControl=ctrl)
plsFit
plsClasses <- predict(plsFit, newdata = testing3)
combo <- data.frame(testing3$Class, plsClasses)
colnames(combo)<- c("Class","predClass")
combo$absDiff <- abs(combo$Class - combo$predClass)
combo$Diff <- (combo$Class - combo$predClass)
mean(combo$absDiff)
sd(combo$Class)
ctrl <- trainControl(method="repeatedcv",repeats = 3); plsFit <- train(Class ~ ., data=training3,method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob",repeats = 3); plsFit <- train(Class ~ ., data=training3,method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob"); plsFit <- train(Class ~ ., data=training3,method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob"); plsFit <- train(Class ~ ., data=training3[,1:8],method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob"); plsFit <- train(Class ~ ., data=training3[,1:9],method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob"); plsFit <- train(training3$Class, data=training3[,1:8],method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob"); plsFit <- train(Class, data=training3[,1:8],method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob"); plsFit <- train(Class~, data=training3[,1:8],method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob"); plsFit <- train(Class~., data=training3[,1:8],method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob"); plsFit <- train(Class~., data=training3,method="treebag",trControl=ctrl)
ctrl <- trainControl(method="oob"); plsFit <- train(Class~., data=training3,method="treebag")
plsFit <- train(Class~., data=training3,method="treebag")
plsFit <- train(Class~., data=training3,method="treebag",metric='MAE')
plsFit <- train(Class~., data=training3,method="treebag",metric='logLoss')
plsFit <- train(Class~., data=training3,method="treebag",metric='MAE',tuneLength=15)
ctrl <- trainControl(method="boot")
plsFit <- train(Class~., data=training3,method="treebag",metric='MAE',tuneLength=15)
plsFit <- train(Class~., data=training3,method="treebag")
ctrl <- trainControl(method="oob"); plsFit <- train(Class~., data=training3,method="LogicBag",importance=T)
ctrl <- trainControl(method="oob"); plsFit <- train(Class~., data=training3,method="logicBag",importance=T)
ctrl <- trainControl(method="oob"); plsFit <- train(Class~., data=training3,method="logicBag",importance=T)
ctrl <- trainControl(method="oob"); plsFit <- train(Class~., data=training3,method="logicBag")
plsFit <- train(Class~., data=training3,method="logicBag")
plsFit <- train(Class~., data=training3,method="BstLm")
plsFit <- train(Class~., data=training3,method="BstLm")
plsFit
ctrl <- trainControl(method="repeatedcv",repeats=3)
plsFit <- train(Class~., data=training3,method="BstLm")
plsFit
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="blassoaveraged", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3, method="blassoAveraged", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
set.seed(159)
inTrain3 <- createDataPartition(y=y9CLRut$Class,p=.75,list=F)
training3 <-y9CLRut[ inTrain3,]
testing3 <-y9CLRut[ -inTrain3,]
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="blassoAveraged", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs=T,summaryFunction = twoClassSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
y9CLRut$Class <- as.factor(y9CLRut$Class)
set.seed(159)
inTrain3 <- createDataPartition(y=y9CLRut$Class,p=.75,list=F)
training3 <-y9CLRut[ inTrain3,]
testing3 <-y9CLRut[ -inTrain3,]
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs=T,summaryFunction = twoClassSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
training3$Class<-as.factor(training3$Class)
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
training3$Class<-factor(training3$Class, levels = c("none","recurrent"))
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",trControl=ctrl)
plsFit
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs=T,summaryFunction = prSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",trControl=ctrl)
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC")
plsFit <- train(Class ~ ., data=training3, method="manb")
ctrl <- trainControl(classProbs=T,summaryFunction = prSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3, method="treebag")
warnings()
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs=T,summaryFunction = prSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="treebag")
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs=T,summaryFunction = prSummary)
plsFit <- train(Class ~ ., data=training3, method="treebag")
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "rose")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",preProc=c("center","scale"),trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "smote")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",preProc=c("center","scale"),trControl=ctrl,importance=T)
plsFit
plsClasses <- predict(plsFit, newdata = testing3)
confusionMatrix(data = plsClasses, testing3$Class)
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit
plsClasses <- predict(plsFit, newdata = testing3)
confusionMatrix(data = plsClasses, testing3$Class)
plot(varImp(plsFit))
plsFit <- train(Class ~ ., data=training3, method="adaboost", tuneLength=15,trControl=ctrl,importance=T)
warnings()
colnames(y9CLRut)<-make.names(colnames(y9CLRut))
set.seed(159)
inTrain3 <- createDataPartition(y=y9CLRut$Class,p=.75,list=F)
training3 <-y9CLRut[ inTrain3,]
testing3 <-y9CLRut[ -inTrain3,]
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",preProc=c("center","scale"),trControl=ctrl,importance=T)
warnings()
df<-colnames(y9CLRut)
colnames(y9CLRut)<-c("tax1","tax2","tax3","tax4","tax5","tax6","tax7","tax8", "Class")
colnames(y9CLRut)<-c("tax1","tax2","tax3","tax4", "Class")
set.seed(159)
inTrain3 <- createDataPartition(y=y9CLRut$Class,p=.75,list=F)
training3 <-y9CLRut[ inTrain3,]
testing3 <-y9CLRut[ -inTrain3,]
set.seed(159)
plsFit <- train(Class ~ ., data=training3, method="manb", tuneLength=15,metric="ROC",preProc=c("center","scale"),trControl=ctrl,importance=T)
warnings()
plsFit <- train(y=Class,x=training3[,1:4], method="manb", tuneLength=15,metric="ROC",preProc=c("center","scale"),trControl=ctrl,importance=T)
plsFit <- train(y=training3[,"Class"],x=training3[,1:4], method="manb", tuneLength=15,metric="ROC",preProc=c("center","scale"),trControl=ctrl,importance=T)
warnings()
plsFit <- train(y=as.factor(training3[,"Class"]),x=training3[,1:4], method="manb", tuneLength=15,metric="ROC",preProc=c("center","scale"),trControl=ctrl,importance=T)
plsFit <- train(y=as.factor(training3[,"Class"]),x=training3[,1:4], method="adaboost", tuneLength=15,metric="ROC",preProc=c("center","scale"),trControl=ctrl,importance=T)
plsFit
cognClust<-read.csv("/Volumes/LATEST/cognClust.csv",row.names = 1,check.names = F)
plsFit <- train(y=as.factor(training3[,"Class"]),x=training3[,1:4], method="adaboost", tuneLength=15,metric="ROC",preProc=c("center","scale"),trControl=ctrl,importance=T)
plsFit
plsClasses <- predict(plsFit, newdata = testing3)
confusionMatrix(data = plsClasses, testing3$Class)
df
colnames(y33CLRut)<-c("Dialister sp","Peptoniphilus sp","Campylobacter sp","Corynbacterium sp","Class")
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "smote")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plot(varImp(plsFit))
colnames(y9CLRut)<-c("Dialister sp","Peptoniphilus sp","Campylobacter sp","Corynbacterium sp","Class")
#colnames(y9CLRut)<-c("")
set.seed(159)
inTrain3 <- createDataPartition(y=y9CLRut$Class,p=.75,list=F)
training3 <-y9CLRut[ inTrain3,]
testing3 <-y9CLRut[ -inTrain3,]
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "smote")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plot(varImp(plsFit))
plot(varImp(plsFit),cex=2)
plot(varImp(plsFit),cex.axis=2)
plot(varImp(plsFit),cex.axis=3)
plot(varImp(plsFit),cex.axis=3,cex=1)
plot(varImp(plsFit),cex.axis=3,cex=1,main="Predicting UTI recurrence")
plot(varImp(plsFit),cex.axis=10,cex=1,main="Predicting UTI recurrence")
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plot(varImp(plsFit),cex.axis=10,cex=1,main="Predicting UTI recurrence")
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "down")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plot(varImp(plsFit),cex.axis=10,cex=1,main="Predicting UTI recurrence")
plsFit
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary)
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plot(varImp(plsFit),cex.axis=10,cex=1,main="Predicting UTI recurrence")
plsFit
plsClasses <- predict(plsFit, newdata = testing3)
confusionMatrix(data = plsClasses, testing3$Class)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "down")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsClasses <- predict(plsFit, newdata = testing3)
confusionMatrix(data = plsClasses, testing3$Class)
#colnames(y9CLRut)<-c("Dialister sp","Peptoniphilus sp","Campylobacter sp","Corynbacterium sp","Class")
set.seed(159)
inTrain3 <- createDataPartition(y=y9CLRut$Class,p=.90,list=F)
training3 <-y9CLRut[ inTrain3,]
testing3 <-y9CLRut[ -inTrain3,]
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary, sampling = "up")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary)
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit
plot(varImp(plsFit),cex.axis=10,cex=1,main="Predicting UTI recurrence")
plsClasses <- predict(plsFit, newdata = testing3)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary,sampling="smote")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit
plot(varImp(plsFit),cex.axis=10,cex=1,main="Predicting UTI recurrence")
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary,sampling="rose")
plsFit <- train(Class ~ ., data=training3, method="pls", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs=T,summaryFunction = prSummary)
plsFit <- train(Class ~ ., data=training3, method="bayesglm", tuneLength=15,metric="ROC",trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3, method="bayesglm", tuneLength=15,metric="ROC",trControl=ctrl)
plsFit
cognClust<-read.csv("/Volumes/LATEST/cognClust.csv",row.names = 1,check.names = F)
y33<- extract.clade(imp20tr,"y33")
cmon <- intersect(rownames(y33CLRut), rownames(cognClust))
y33CLRut <- y33CLRut[cmon,]
cognClust<-cognClust[cmon,]
y33CLRut$Class <- cognClust$`cognPam1$clustering`
df<-colnames(y33CLRut)
df
library(ape)
y33<- extract.clade(imp20tr,"y33")
y33<-y33$tip.label
cmon2 <- intersect(colnames(totuImp), y33)
y33CLRut <- totuImp[,cmon2]
cmon <- intersect(rownames(y33CLRut), rownames(cognClust))
y33CLRut <- y33CLRut[cmon,]
cognClust<-cognClust[cmon,]
y33CLRut$Class <- cognClust$`cognPam1$clustering`
df<-colnames(y33CLRut)
y33CLRut <- y33CLRut[complete.cases(y33CLRut$Class),]
df
colnames(y33CLRut)<-c("Negativicoccus sp", "Sutterella sp","Bacteroides sp","Prevotella sp","Actinomycetaceae","Actinomyces sp","Alloscardovia","Pepton.coxii","Class")
is.numeric(y33CLRut$Class)
set.seed(159)
inTrain3 <- createDataPartition(y=y33CLRut$Class,p=.75,list=F)
library(cluster)
set.seed(159)
inTrain3 <- createDataPartition(y=y33CLRut$Class,p=.75,list=F)
training3 <-y33CLRut[ inTrain3,]
testing3 <-y33CLRut[ -inTrain3,]
library(caret)
set.seed(159)
inTrain3 <- createDataPartition(y=y33CLRut$Class,p=.75,list=F)
training3 <-y33CLRut[ inTrain3,]
testing3 <-y33CLRut[ -inTrain3,]
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs = T)
plsFit <- train(Class ~ ., data=training3,method="blassoAveraged", tuneLength=15,preProc=c("center","scale"),trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3,method="blassoAveraged", tuneLength=15,preProc=c("center","scale"),trControl=ctrl)
#add importance=T to plsFit if model needs it
plsFit
plsClasses <- predict(plsFit, newdata = testing3)
#plot(varImp(plsFit))
combo <- data.frame(testing3$Class, plsClasses)
colnames(combo)<- c("Class","predClass")
combo$absDiff <- abs(combo$Class - combo$predClass)
combo$Diff <- (combo$Class - combo$predClass)
mean(combo$absDiff)
sd(combo$Class)
sqrt(mean(combo$Diff*combo$Diff))
mean(combo$absDiff)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T)
plsFit <- train(Class ~ ., data=training3,method="blassoAveraged", tuneLength=15,trControl=ctrl)
plsClasses <- predict(plsFit, newdata = testing3)
#confusionMatrix(data = plsClasses, testing3$Class)
plot(plsFit)
#plot(varImp(plsFit))
combo <- data.frame(testing3$Class, plsClasses)
colnames(combo)<- c("Class","predClass")
combo$absDiff <- abs(combo$Class - combo$predClass)
combo$Diff <- (combo$Class - combo$predClass)
mean(combo$absDiff)
sd(combo$Class)
sqrt(mean(combo$Diff*combo$Diff))
#confusionMatrix(data = plsClasses, testing3$Class)
plot(plsFit)
#add importance=T to plsFit if model needs it
plsFit
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T)
plsFit <- train(Class ~ ., data=training3,method="rf", tuneLength=15,trControl=ctrl,importance=T)
warnings()
plsFit
plsClasses <- predict(plsFit, newdata = testing3)
#plot(varImp(plsFit))
combo <- data.frame(testing3$Class, plsClasses)
colnames(combo)<- c("Class","predClass")
combo$absDiff <- abs(combo$Class - combo$predClass)
combo$Diff <- (combo$Class - combo$predClass)
mean(combo$absDiff)
sd(combo$Class)
sqrt(mean(combo$Diff*combo$Diff))
plot(varImp(plsFit))
plot(varImp(plsFit), main="Predcting cognitive clusters")
plot(varImp(plsFit), main="Predicting cognitive clusters")
ctrl <- trainControl(method="repeatedcv",repeats = 3,classProbs = T)
plsFit <- train(Class ~ ., data=training3,method="rpart", tuneLength=15,trControl=ctrl,importance=T)
plsFit <- train(y=training3[,"Class"],x=training3[,1:8],method="rpart", tuneLength=15,trControl=ctrl,importance=T)
plsFit <- train(y=training3[,"Class"],x=training3[,1:8],method="rpart", tuneLength=15,trControl=ctrl)
plsFit
plsClasses <- predict(plsFit, newdata = testing3)
#plot(varImp(plsFit))
combo <- data.frame(testing3$Class, plsClasses)
colnames(combo)<- c("Class","predClass")
combo$absDiff <- abs(combo$Class - combo$predClass)
combo$Diff <- (combo$Class - combo$predClass)
mean(combo$absDiff)
plsFit <- train(Class ~ ., data=training3,method="bayesglm", tuneLength=15,trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3,method="bayesglm", tuneLength=15,trControl=ctrl)
plsFit
#plot(varImp(plsFit))
combo <- data.frame(testing3$Class, plsClasses)
colnames(combo)<- c("Class","predClass")
combo$absDiff <- abs(combo$Class - combo$predClass)
combo$Diff <- (combo$Class - combo$predClass)
mean(combo$absDiff)
plsFit <- train(Class ~ ., data=training3,method="glmboost", tuneLength=15,trControl=ctrl)
plsFit
plsFit <- train(Class~., data=training3,method="glmboost", tuneLength=15,trControl=ctrl,importance=T,prune=T)
plsFit <- train(Class~., data=training3,method="glmboost", tuneLength=15,trControl=ctrl,prune=T)
?bartMachine::num_trees
??bartMachine::num_trees
??bartMachine::nu
plsFit <- train(Class~., data=training3,method="bartMachine", tuneLength=15,trControl=ctrl,num_trees=10,set_bart_machine_num_cores(4))
plsFit <- train(Class~., data=training3,method="bartMachine", tuneLength=15,trControl=ctrl,num_trees=10,num_cores=4)
plsFit <- train(Class~., data=training3,method="bartMachine",trControl=ctrl,num_trees=10,num_cores=4)
warnings()
plsFit <- train(Class~., data=training3,method="bartMachine",trControl=ctrl,num_trees=50,num_cores=4)
warnings()
plsFit <- train(Class~., data=training3,method="bartMachine",trControl=ctrl,rmse_by_num_trees=10,num_cores=4)
warnings()
plsFit <- train(Class~., data=training3,method="bartMachine", tuneLength=15,trControl=ctrl,num_cores=4)
plsFit <- train(Class~., data=training3,method="bartMachine",trControl=ctrl,num_cores=4)
warnings()
plsFit <- train(Class~., data=training3,method="bartMachine",trControl=ctrl,set_bart_machine_num_cores(4),rmse_by_num_trees(10))
plsFit <- train(y=training3[,"Class"],x=training3[,1:8],method="rpart", tuneLength=15,trControl=ctrl)
plsFit <- train(y=training3[,"Class"],x=training3[,1:8],method="rpart", tuneLength=15,trControl=ctrl,importance=T)
plot(plsFit)
plot(varImp(plsFit))
plsFit <- train(Class~., data=training3,method="bridge",trControl=ctrl)
plsFit <- train(Class~., data=training3,method="bridge",trControl=ctrl,importance=T)
warnings()
plsFit <- train(Class~., data=training3,method="bridge",trControl=ctrl)
plot(varImp(plsFit))
plot((plsFit))
plsFit
plsFit <- train(Class~., data=training3,method="bridge",trControl=ctrl,importance=T)
plsFit <- train(Class~., data=training3,method="BstLm",trControl=ctrl,importance=T)
plsFit <- train(Class~., data=training3,method="BstLm",trControl=ctrl)
plsFit
y33CLRut$Class<-gsub("1","Group1", y33CLRut$Class)
y33CLRut$Class<-gsub("2","Group2", y33CLRut$Class)
y33CLRut$Class<-gsub("3","Group3", y33CLRut$Class)
set.seed(159)
inTrain3 <- createDataPartition(y=y33CLRut$Class,p=.75,list=F)
training3 <-y33CLRut[ inTrain3,]
testing3 <-y33CLRut[ -inTrain3,]
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T,sampling = "smote")
plsFit <- train(Class ~ ., data=training3,method="pls", tuneLength=15,trControl=ctrl,importance=T)
warnings()
plsFit
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T,sampling = "up")
plsFit <- train(Class ~ ., data=training3,method="pls", tuneLength=15,trControl=ctrl,importance=T)
plsFit
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T)
plsFit <- train(Class ~ ., data=training3,method="pls", tuneLength=15,trControl=ctrl,importance=T)
plot(varImp(plsFit))
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T,sampling = "up")
plsFit <- train(Class ~ ., data=training3,method="pls", tuneLength=15,trControl=ctrl,importance=T)
plot(varImp(plsFit))
plot(varImp(plsFit),main="Predicting Cognitive cluster")
plsClasses <- predict(plsFit, newdata = testing3)
confusionMatrix(data = plsClasses, testing3$Class)
confusionMatrix(data = plsClasses, as.factor(testing3$Class))
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T,sampling = "up",summaryFunction = prSummary)
plsFit <- train(Class ~ ., data=training3,method="pls", tuneLength=15,trControl=ctrl,importance=T)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T,sampling = "rose")
plsFit <- train(Class ~ ., data=training3,method="pls", tuneLength=15,trControl=ctrl,importance=T)
plsFit <- train(y=training3[,'Class'], training3[,1:8],method="pls", tuneLength=15,trControl=ctrl,importance=T)
plsFit <- train(y=training3[,'Class'],x= training3[,1:8],method="pls", tuneLength=15,trControl=ctrl,importance=T)
warnings()
colnames(y33CLRut)<-c("Negativicoccus_sp", "Sutterella_sp","Bacteroides_sp","Prevotella_sp","Actinomycetaceae","Actinomyces_sp","Alloscardovia","Pepton.coxii","Class")
set.seed(159)
inTrain3 <- createDataPartition(y=y33CLRut$Class,p=.75,list=F)
training3 <-y33CLRut[ inTrain3,]
testing3 <-y33CLRut[ -inTrain3,]
set.seed(159)
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T,sampling = "rose")
set.seed(159)
plsFit <- train(Class ~ ., data=training3,method="pls", tuneLength=15,trControl=ctrl,importance=T)
warnings()
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T)
plsFit <- train(Class ~ ., data=training3,method="pls", tuneLength=15,trControl=ctrl,importance=T)
#add importance=T to plsFit if model needs it
plsFit
plot(varImp(plsFit))
ctrl <- trainControl(method="repeatedcv",repeats = 10,classProbs = T)
plsFit <- train(Class ~ ., data=training3,method="rda", tuneLength=15,trControl=ctrl,importance=T)
plsFit <- train(Class ~ ., data=training3,method="rda", tuneLength=15,trControl=ctrl,importance=T)
plsFit
NROW(which(y33CLRut$Class=="1"))
NROW(which(y33CLRut$Class=="Group1"))
NROW(which(y33CLRut$Class=="Group2"))
NROW(which(y33CLRut$Class=="Group3"))
savehistory("latestrun.txt")
